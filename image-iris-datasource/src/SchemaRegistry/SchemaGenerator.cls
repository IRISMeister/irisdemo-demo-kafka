Class SchemaRegistry.SchemaGenerator
{

/// Takes a multidimensional array generated by SchemaRegistry.API.GetSchemaVersion() 
/// and uses it to create IRIS classes that match that schema.
ClassMethod CreateOrReplaceClassTree(pConfigName As %String, pSchema) As %Status
{
    Set tSC = $$$OK
    Try
    {
        If pConfigName=""
        {
            Set tSC = $$$ERROR(5001,"Config name is required")
            Quit
        }

        Set subject=pSchema("subject")
        Set version=pSchema("version")
        Set signature=pSchema("signature")
        Set id=pSchema("id")

        TStart

        Set schema = {}.%FromJSON(pSchema("schema"))

        Set tSC = ..CreateOrReplaceClassBasedOnSchema("", schema, signature, version, .createdClassName, pConfigName, subject, id)
        Quit:$$$ISERR(tSC)

        If createdClassName'=""
        {
            Set tSC = $System.OBJ.Compile(createdClassName, "cdk")
        }
    }
    Catch (oException)
    {
        Set tSC = oException.AsStatus()
    }

    If $$$ISERR(tSC)
    {
        TRollback
    }
    Else
    {
        TCommit
    }

    Quit tSC
}

ClassMethod CreateOrReplaceClassBasedOnSchema(namespace, schema, signature, version, Output pCreatedClassName As %String, pConfigName = "", subject = "", id = "") As %Status
{
    #define H(%prop) $Get(pSchema(%prop))
    //#define F(%prop) $Get(pSchema("schema","fields",iField,%prop))

    Set tSC = $$$OK
    Try
    {
        If namespace=""
        {
            Set namespace=schema.namespace
        }

        Set pCreatedPackage=namespace_".V"_version
        Set pCreatedClassName=pCreatedPackage_"."_schema.name

        // If this is the root class
        If pConfigName'=""
        {
            Set classDef = ##class(%Dictionary.ClassDefinition).%OpenId(pCreatedClassName)

            If $IsObject(classDef) && (..GetClassParameter(classDef, "SCHEMASIGNATURE")=signature)
            {
                Set pCreatedClassName=""
                Quit
            }
        }

        Do ##class(%Dictionary.ClassDefinition).%DeleteId(pCreatedClassName)

        Write !,"Creating class ",pCreatedClassName,"..."
        Set classDef = ##class(%Dictionary.ClassDefinition).%New(pCreatedClassName)
        
        // If this is the root class
        If pConfigName'=""
        {
            Do ..AddClassParamter(classDef, "SCHEMAIMPORTDATE", $ZDateTime($Horolog,3))
            Do ..AddClassParamter(classDef, "SCHEMASIGNATURE", signature)
            Do ..AddClassParamter(classDef, "SCHEMACONFIG", pConfigName)
            Do ..AddClassParamter(classDef, "SCHEMAID", id)
            Do ..AddClassParamter(classDef, "SCHEMASUBJECT", subject)
            Do ..AddClassParamter(classDef, "SCHEMAVERSION", version)

            Set classDef.Super="%Persistent,SchemaRegistry.SchemaGenerated"
        }
        Else
        {
            Set classDef.Super="%SerialObject"
        }

        Set fieldIterator = schema.fields.%GetIterator()
        While fieldIterator.%GetNext(.key, .field)
        {
            Set bRequired = 1
            Set tIRISType=""

            If $IsObject(field.type)
            {
                If field.type.%ClassName()="%DynamicArray"
                {
                    If (field.type.%Get(0)="null") 
                    {
                        Set bRequired = 0
                        Set field.type=field.type.%Get(1)
                    }
                    ElseIf (field.type.%Get(1)="null")
                    {
                        Set bRequired = 0
                        Set field.type=field.type.%Get(0)
                    }
                }
                Else
                {
                    Set tSC = ..CreateOrReplaceClassBasedOnSchema(namespace, field.type, signature, version, .tIRISType)
                }
            }

            If tIRISType=""
            {
                If field.logicalType="timestamp-millis"
                {
                    Set tIRISType="%TimeStamp"
                }
                Else
                {
                    Set tIRISType=$Case(field.type, "double":"%Double",
                                                "long":"%BigInt",
                                                "int":"%Integer",
                                                "boolean":"%Boolean",
                                                "float":"%Float",
                                                :"%String")
                }
            }

            Do ..AddProperty(classDef, field.name, tIRISType, field.type, field.logicalType, bRequired, field.default)
            
        }

        Set tSC = classDef.%Save()
        Quit:$$$ISERR(tSC)

    }
    Catch (oException)
    {
        Set tSC = oException.AsStatus()
    }

    Quit tSC
}

ClassMethod AddClassParamter(pClassDef As %Dictionary.ClassDefinition, pParamName As %String, pParamValue As %String)
{
    Set oParam = ##class(%Dictionary.ParameterDefinition).%New()
    Set oParam.Default=pParamValue
    Set oParam.Name=pParamName
    Do pClassDef.Parameters.Insert(oParam)
}

ClassMethod GetClassParameter(pClassDef As %Dictionary.ClassDefinition, pParamName As %String) As %String
{
    For i=1:1:pClassDef.Parameters.Count()
    {
        Set oParam = pClassDef.Parameters.GetAt(i)
        If oParam.Name=pParamName
        {
            Return oParam.Default
        }
    }
    Return ""
}

ClassMethod AddProperty(pClassDef As %Dictionary.ClassDefinition, pPropertyName As %String, pIRISType As %String, pType As %String, pLogicalType As %String, pRequired As %Boolean, pDefaultValue As %String)
{
    Set oProp = ##class(%Dictionary.PropertyDefinition).%New()
    Set oProp.Name=pPropertyName
    Set oProp.Type=pIRISType
    Set oProp.Required=pRequired
    If pDefaultValue'="" Set oProp.InitialExpression = """"_pDefaultValue_""""
    Do pClassDef.Properties.Insert(oProp)
}

}
